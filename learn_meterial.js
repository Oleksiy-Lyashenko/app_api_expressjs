// import express from 'express';
// import { router } from './router/router.js';

// const port = 8000;

// const app = express();

// // Все запросы, которые можно обрабатывать через express
// app.get()
// app.post();
// app.delete();
// app.put();
// app.patch();

// // Метод all является промежуточным звеном(middleware) между запросом ана сервер и формированием ответа
// // Обязательно принимает в себя 3 аргумента, в конце функция next, которая передает дальше выполнение запросов
// app.all('/hello',(req, res, next) => {
//   console.log('app');
//   next();
// })

// // Данный пример показывает как можно сделать еще middleware без использования метода all
// // Функцию обязательно нужно передать как аргумент в запросы ниже
// // Если не добавить функцию next в конце функции зарпосы, который стоят ниже не будет выоплнены
// const cb = (req, res, next) => {
//   console.log('CB');
//   next();
// };

// // Данных middleware как cb можно добавлять несколько через запятую
// app.get('/hello', cb, cb, cb, (req, res) => {
//   // Метод set устанавливает заголовки со значениями, которые можно передать сторым значением
//   res.set('Content Type', 'text/plain')
//   // Метод append добавляет новый заголовок в запрос 
//   res.append('Warning', 'hi')
//   // Метод type формирует определенное расширение на ответ сервера, примерно также как заголовок Content Type
//   res.type('json');
//   // Метод location передает локацию данного файла 
//   res.location('')
//   // Метод links может передавать первый и последний линк
//   res.links()
//   // Мтеод cookie позволяет рабоатть из файлами cookie, в метод передается 3 параметра, как ниже
//   res.cookie('name', 'value', {
//     domain: '',
//     path: '',
//   })
//   // Метод clearCookie очищает файлы по их названию
//   res.clearCookie('name')

//   res.send('Hello')
//   // Метод status можно задать оишбку которую возвращает сервер, тауже можно отправлять обьект
//   res.status(201).send({ success: true}); 
//   // Можно отправлять в виде файла json
//   res.json({ success: true });
//   //Метод download формирует запрос на скачку файла
//   res.download('/file.pdf')
//   // Перенаправляет на другой ресурс или файл
//   res.redirect('/git')
//   // Метод end завершает запрос
//   res.end();
// })

// // Маршрутизация
// app.route('/user').get('/hello', (req, res) => {
//   res.send('Hello')
// })

// // Router
// // В данном примере если мы переходит по линку router, то дальше начиняет выполнятся функция router, которую мы подвязали Router
// // И адльше будут выполнсся звпросы по линкам, которые мы описали в router (/login, /register)
// app.use('/router', router);


// // Промежуточные обработчики (middleware)

// // В данном примере мы сделали промежуточный обработчик на все приложение, который выполняется при первом же запросе
// // Только данный обратотчик нужно вешать в самый верх приложения
// app.use((req, res, next) => {
//   console.log('Время ', Date.now());
//   next();
// })

// // В данном примере мы задали обработчик только по запросу на определнный url и он будет выоплнятся только на его прееход
// app.use('/hello', (req, res, next) => {
//   console.log('Hello');
//   next();
// })

// // Обработчик ошибки
// // Данный обработчик должен стоять после всех использоваемвых use в приложении ОБЯЗАТЕЛЬНО!
// // Он принимает в себя 4 аргумента, err в начале и далее возвращает сам текст
// // Данный middleware принимает все ошибки которые приходят их middleware и наших обработчиков и возращают эту функцию
// app.use((err, req, res, next) => {
//   console.log(err.message);
//   res.status(500).send(err.message)
// })

// app.listen(port, () => {
//   console.log('Сервер запущен');
// })